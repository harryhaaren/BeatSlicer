!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AUDIOOBJECT_H	AudioObject.h	2;"	d
AudioObject	AudioObject.h	/^struct AudioObject {$/;"	s
BPM_to_time	time.h	/^double BPM_to_time (float BPM, float nbeats)$/;"	f
DataToMidiEvent	Midi.h	/^struct Midi_Event DataToMidiEvent( jack_midi_event_t in_event)$/;"	f
EmptySlice	Slice.h	/^}EmptySlice;$/;"	v	typeref:struct:Slice
Envelope	Slice.h	/^struct Envelope {$/;"	s
GenerateSample	AudioObject.c	/^float * GenerateSample(struct AudioObject Object, int nframes)$/;"	f
LoadFile	LoadFile.h	/^struct AudioObject LoadFile(char * path)$/;"	f
MidiNoteToNote	Midi.c	/^char * MidiNoteToNote(int note)$/;"	f
Midi_Event	Midi.h	/^struct Midi_Event {$/;"	s
Mixer	Mixer.h	/^struct Mixer { $/;"	s
Mixer1	Mixer.h	/^}Mixer1;$/;"	v	typeref:struct:Mixer
MixerUpdate	Mixer.h	/^struct Mixer MixerUpdate(int nframes) {$/;"	f
NoteToMidiNote	Midi.c	/^int NoteToMidiNote(char * note)$/;"	f
Object1	AudioObject.h	/^}Object1;$/;"	v	typeref:struct:AudioObject
Playback	Slice.h	/^struct Playback {$/;"	s
SLICE_H	Slice.h	2;"	d
Slice	Slice.h	/^struct Slice {$/;"	s
SliceAutoSlice	Slice.c	/^int SliceAutoSlice( struct AudioObject Object, char * mode, int div)$/;"	f
SliceCreate	Slice.c	/^int SliceCreate( struct AudioObject Object, char * mode, int Pos, int Size, int key)$/;"	f
SliceDelete	Slice.c	/^int SliceDelete(int index)$/;"	f
SliceGenerateSample	Slice.c	/^float * SliceGenerateSample(struct Slice * slice, int nframe, int speed)$/;"	f
SliceResize	Slice.c	/^int SliceResize(int index, int pos, int size)$/;"	f
SliceStartPlayback	Slice.c	/^int SliceStartPlayback(struct Slice * slice)$/;"	f
SliceVolume	Slice.c	/^float SliceVolume(struct Slice * slice, int pos)$/;"	f
TIME_H	time.h	2;"	d
attack_t	Slice.h	/^    float attack_t;$/;"	m	struct:Envelope
channel	Midi.h	/^    int channel;$/;"	m	struct:Midi_Event
decay_t	Slice.h	/^    float decay_v, decay_t;$/;"	m	struct:Envelope
decay_v	Slice.h	/^    float decay_v, decay_t;$/;"	m	struct:Envelope
envelope	Slice.h	/^    struct Envelope envelope;$/;"	m	struct:Slice	typeref:struct:Slice::Envelope
index	Slice.h	/^    int index;$/;"	m	struct:Slice
inputPort	jackClient.c	/^jack_port_t* inputPort = 0;$/;"	v
isPlaying	Slice.h	/^    int isPlaying;$/;"	m	struct:Slice
key	Slice.h	/^    int key;$/;"	m	struct:Slice
length	Slice.h	/^    int length;$/;"	m	struct:Slice
main	jackClient.c	/^int main(int argc, char * argv[])$/;"	f
next	Slice.h	/^    struct Playback *next;$/;"	m	struct:Playback	typeref:struct:Playback::Playback
next	Slice.h	/^    struct Slice *next ;$/;"	m	struct:Slice	typeref:struct:Slice::Slice
note	Midi.h	/^    int note;$/;"	m	struct:Midi_Event
outputPortL	jackClient.c	/^jack_port_t* outputPortL = 0;$/;"	v
outputPortR	jackClient.c	/^jack_port_t* outputPortR = 0;$/;"	v
playback	Slice.h	/^    struct Playback playback;$/;"	m	struct:Slice	typeref:struct:Slice::Playback
playmode	Slice.h	/^    char * playmode; \/\/ Straight, reverse, $/;"	m	struct:Slice
pos	AudioObject.h	/^    int pos;$/;"	m	struct:AudioObject
pos	Slice.h	/^    int pos;$/;"	m	struct:Playback
pos	Slice.h	/^    int pos;$/;"	m	struct:Slice
previous	Slice.h	/^    struct Slice *previous;$/;"	m	struct:Slice	typeref:struct:Slice::Slice
process	jackClient.c	/^int process(jack_nframes_t nframes, void* emptyshell)$/;"	f
release_t	Slice.h	/^    float release_t;$/;"	m	struct:Envelope
size	AudioObject.h	/^    int size;$/;"	m	struct:AudioObject
source	Slice.h	/^    struct AudioObject source;$/;"	m	struct:Slice	typeref:struct:Slice::AudioObject
state	Slice.h	/^    char * state;$/;"	m	struct:Playback
stream	AudioObject.h	/^    float * stream;$/;"	m	struct:AudioObject
stream	Slice.h	/^    float * stream;$/;"	m	struct:Slice
streamL	Mixer.h	/^    float * streamL;$/;"	m	struct:Mixer
streamR	Mixer.h	/^    float * streamR;$/;"	m	struct:Mixer
sustain_t	Slice.h	/^    float sustain_v, sustain_t;$/;"	m	struct:Envelope
sustain_v	Slice.h	/^    float sustain_v, sustain_t;$/;"	m	struct:Envelope
time_to_frame	time.h	/^int time_to_frame(float time, int samplerate)$/;"	f
type	Midi.h	/^    char * type;$/;"	m	struct:Midi_Event
velocity	Midi.h	/^    int velocity;$/;"	m	struct:Midi_Event
voices	Mixer.h	/^    int voices;$/;"	m	struct:Mixer
volume	Mixer.h	/^    float volume;$/;"	m	struct:Mixer
